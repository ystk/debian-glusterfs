From: Markus Koschany <apo@debian.org>
Date: Sun, 4 Nov 2018 14:50:43 +0100
Subject: CVE-2018-14661

Origin: http://git.gluster.org/cgit/glusterfs.git/commit/?id=74dbf0a9aac4b960832029ec122685b5b5009127
---
 libglusterfs/src/client_t.c                         |  2 +-
 libglusterfs/src/fd.c                               |  8 ++++----
 libglusterfs/src/inode.c                            |  4 ++--
 libglusterfs/src/iobuf.c                            | 18 +++++++++---------
 libglusterfs/src/latency.c                          |  2 +-
 libglusterfs/src/logging.h                          |  4 +++-
 libglusterfs/src/mem-pool.h                         |  3 ++-
 libglusterfs/src/run.h                              |  3 ++-
 libglusterfs/src/stack.c                            |  6 +++---
 libglusterfs/src/statedump.c                        |  8 ++++----
 libglusterfs/src/statedump.h                        |  6 ++++--
 rpc/rpc-lib/src/rpc-drc.c                           |  4 ++--
 xlators/cluster/afr/src/afr-common.c                |  2 +-
 xlators/debug/trace/src/trace.c                     |  2 +-
 xlators/features/locks/src/posix.c                  | 10 +++++-----
 xlators/features/quota/src/quota.c                  |  2 +-
 xlators/mgmt/glusterd/src/glusterd-rebalance.c      |  2 +-
 xlators/mount/fuse/src/fuse-bridge.c                |  4 ++--
 xlators/performance/io-cache/src/io-cache.c         | 14 +++++++-------
 xlators/performance/io-threads/src/io-threads.c     |  2 +-
 xlators/performance/open-behind/src/open-behind.c   |  6 +++---
 xlators/performance/quick-read/src/quick-read.c     |  6 +++---
 xlators/performance/read-ahead/src/read-ahead.c     | 14 ++++++--------
 xlators/performance/write-behind/src/write-behind.c | 10 +++++-----
 xlators/protocol/client/src/client.c                |  4 ++--
 xlators/protocol/server/src/server.c                |  2 +-
 xlators/storage/posix/src/posix.c                   |  2 +-
 27 files changed, 77 insertions(+), 73 deletions(-)

diff --git a/libglusterfs/src/client_t.c b/libglusterfs/src/client_t.c
index 6e09a37..d1a0d72 100644
--- a/libglusterfs/src/client_t.c
+++ b/libglusterfs/src/client_t.c
@@ -612,7 +612,7 @@ clienttable_dump (clienttable_t *clienttable, char *prefix)
                             clienttable->cliententries[i].next_free) {
                                 gf_proc_dump_build_key(key, prefix,
                                                        "cliententry[%d]", i);
-                                gf_proc_dump_add_section(key);
+                                gf_proc_dump_add_section("%s",key);
                                 cliententry_dump(&clienttable->cliententries[i],
                                                  key);
                         }
diff --git a/libglusterfs/src/fd.c b/libglusterfs/src/fd.c
index 36cc4d0..7d1b2a2 100644
--- a/libglusterfs/src/fd.c
+++ b/libglusterfs/src/fd.c
@@ -1006,13 +1006,13 @@ fd_dump (fd_t *fd, char *prefix)
                 return;
 
         memset(key, 0, sizeof(key));
-        gf_proc_dump_write("pid", "%llu", fd->pid);
-        gf_proc_dump_write("refcount", "%d", fd->refcount);
+        gf_proc_dump_write("pid", "%" PRIu64, fd->pid);
+        gf_proc_dump_write("refcount", "%" GF_PRI_ATOMIC, fd->refcount);
         gf_proc_dump_write("flags", "%d", fd->flags);
 
         if (fd->inode) {
                 gf_proc_dump_build_key (key, "inode", NULL);
-                gf_proc_dump_add_section(key);
+                gf_proc_dump_add_section("%s", key);
                 inode_dump (fd->inode, key);
         }
 
@@ -1060,7 +1060,7 @@ fdtable_dump (fdtable_t *fdtable, char *prefix)
                 if (GF_FDENTRY_ALLOCATED ==
                     fdtable->fdentries[i].next_free) {
                         gf_proc_dump_build_key(key, prefix, "fdentry[%d]", i);
-                        gf_proc_dump_add_section(key);
+                        gf_proc_dump_add_section("%s", key);
                         fdentry_dump(&fdtable->fdentries[i], key);
                 }
         }
diff --git a/libglusterfs/src/inode.c b/libglusterfs/src/inode.c
index 15e0ccf..b4b1ab1 100644
--- a/libglusterfs/src/inode.c
+++ b/libglusterfs/src/inode.c
@@ -35,7 +35,7 @@
                 list_for_each_entry (inode, head, list) {               \
                         gf_proc_dump_build_key(key_buf, key_prefix,     \
                                                "%s.%d",list_type, i++); \
-                        gf_proc_dump_add_section(key_buf);              \
+                        gf_proc_dump_add_section("%s", key_buf);        \
                         inode_dump(inode, key);                         \
                 }                                                       \
         }
@@ -1886,7 +1886,7 @@ inode_table_dump (inode_table_t *itable, char *prefix)
         }
 
         gf_proc_dump_build_key(key, prefix, "hashsize");
-        gf_proc_dump_write(key, "%d", itable->hashsize);
+        gf_proc_dump_write(key, "%" GF_PRI_SIZET, itable->hashsize);
         gf_proc_dump_build_key(key, prefix, "name");
         gf_proc_dump_write(key, "%s", itable->name);
 
diff --git a/libglusterfs/src/iobuf.c b/libglusterfs/src/iobuf.c
index 82ffe2d..ae31dac 100644
--- a/libglusterfs/src/iobuf.c
+++ b/libglusterfs/src/iobuf.c
@@ -1038,7 +1038,7 @@ iobuf_info_dump (struct iobuf *iobuf, const char *key_prefix)
         UNLOCK(&iobuf->lock);
 
         gf_proc_dump_build_key(key, key_prefix,"ref");
-        gf_proc_dump_write(key, "%d", my_iobuf.ref);
+        gf_proc_dump_write(key, "%" GF_PRI_ATOMIC, my_iobuf.ref);
         gf_proc_dump_build_key(key, key_prefix,"ptr");
         gf_proc_dump_write(key, "%p", my_iobuf.ptr);
 
@@ -1064,12 +1064,12 @@ iobuf_arena_info_dump (struct iobuf_arena *iobuf_arena, const char *key_prefix)
         gf_proc_dump_build_key(key, key_prefix, "alloc_cnt");
         gf_proc_dump_write(key, "%"PRIu64, iobuf_arena->alloc_cnt);
         gf_proc_dump_build_key(key, key_prefix, "max_active");
-        gf_proc_dump_write(key, "%"PRIu64, iobuf_arena->max_active);
+        gf_proc_dump_write(key, "%d", iobuf_arena->max_active);
         gf_proc_dump_build_key(key, key_prefix, "page_size");
-        gf_proc_dump_write(key, "%"PRIu64, iobuf_arena->page_size);
+        gf_proc_dump_write(key, "%" GF_PRI_SIZET, iobuf_arena->page_size);
         list_for_each_entry (trav, &iobuf_arena->active.list, list) {
                 gf_proc_dump_build_key(key, key_prefix,"active_iobuf.%d", i++);
-                gf_proc_dump_add_section(key);
+                gf_proc_dump_add_section("%s", key);
                 iobuf_info_dump(trav, key);
         }
 
@@ -1097,9 +1097,9 @@ iobuf_stats_dump (struct iobuf_pool *iobuf_pool)
         }
         gf_proc_dump_add_section("iobuf.global");
         gf_proc_dump_write("iobuf_pool","%p", iobuf_pool);
-        gf_proc_dump_write("iobuf_pool.default_page_size", "%d",
+        gf_proc_dump_write("iobuf_pool.default_page_size", "%" GF_PRI_SIZET,
                                                 iobuf_pool->default_page_size);
-        gf_proc_dump_write("iobuf_pool.arena_size", "%d",
+        gf_proc_dump_write("iobuf_pool.arena_size", "%" GF_PRI_SIZET,
                            iobuf_pool->arena_size);
         gf_proc_dump_write("iobuf_pool.arena_cnt", "%d",
                            iobuf_pool->arena_cnt);
@@ -1110,21 +1110,21 @@ iobuf_stats_dump (struct iobuf_pool *iobuf_pool)
                 list_for_each_entry (trav, &iobuf_pool->arenas[j], list) {
                         snprintf(msg, sizeof(msg),
                                  "arena.%d", i);
-                        gf_proc_dump_add_section(msg);
+                        gf_proc_dump_add_section("%s", msg);
                         iobuf_arena_info_dump(trav,msg);
                         i++;
                 }
                 list_for_each_entry (trav, &iobuf_pool->purge[j], list) {
                         snprintf(msg, sizeof(msg),
                                  "purge.%d", i);
-                        gf_proc_dump_add_section(msg);
+                        gf_proc_dump_add_section("%s", msg);
                         iobuf_arena_info_dump(trav,msg);
                         i++;
                 }
                 list_for_each_entry (trav, &iobuf_pool->filled[j], list) {
                         snprintf(msg, sizeof(msg),
                                  "filled.%d", i);
-                        gf_proc_dump_add_section(msg);
+                        gf_proc_dump_add_section("%s", msg);
                         iobuf_arena_info_dump(trav,msg);
                         i++;
                 }
diff --git a/libglusterfs/src/latency.c b/libglusterfs/src/latency.c
index b22f729..b755e53 100644
--- a/libglusterfs/src/latency.c
+++ b/libglusterfs/src/latency.c
@@ -161,7 +161,7 @@ gf_proc_dump_latency_info (xlator_t *xl)
         int i;
 
         snprintf (key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.latency", xl->name);
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         for (i = 0; i < GF_FOP_MAXVALUE; i++) {
                 gf_proc_dump_build_key (key, key_prefix,
diff --git a/libglusterfs/src/logging.h b/libglusterfs/src/logging.h
index e2b7e66..97985de 100644
--- a/libglusterfs/src/logging.h
+++ b/libglusterfs/src/logging.h
@@ -34,6 +34,7 @@
 #endif
 #define GF_PRI_BLKSIZE     PRId32
 #define GF_PRI_SIZET       "zu"
+#define GF_PRI_ATOMIC PRIu64
 
 
 #if 0
@@ -103,7 +104,8 @@ int _gf_log_nomem (const char *domain, const char *file,
                    const char *function, int line, gf_loglevel_t level,
                    size_t size);
 
-int _gf_log_eh (const char *function, const char *fmt, ...);
+int _gf_log_eh (const char *function, const char *fmt, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 
 
diff --git a/libglusterfs/src/mem-pool.h b/libglusterfs/src/mem-pool.h
index 31f49f7..e4812e3 100644
--- a/libglusterfs/src/mem-pool.h
+++ b/libglusterfs/src/mem-pool.h
@@ -49,7 +49,8 @@ int
 gf_vasprintf (char **string_ptr, const char *format, va_list arg);
 
 int
-gf_asprintf (char **string_ptr, const char *format, ...);
+gf_asprintf (char **string_ptr, const char *format, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 void
 __gf_free (void *ptr);
diff --git a/libglusterfs/src/run.h b/libglusterfs/src/run.h
index d7554ef..e6ed649 100644
--- a/libglusterfs/src/run.h
+++ b/libglusterfs/src/run.h
@@ -76,7 +76,8 @@ void runner_add_args (runner_t *runner, ...);
  * @param runner pointer to runner_t instance
  * @param format printf style format specifier
  */
-void runner_argprintf (runner_t *runner, const char *format, ...);
+void runner_argprintf (runner_t *runner, const char *format, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 /**
  * log a message about the command to be run.
diff --git a/libglusterfs/src/stack.c b/libglusterfs/src/stack.c
index 37b338f..521c610 100644
--- a/libglusterfs/src/stack.c
+++ b/libglusterfs/src/stack.c
@@ -123,7 +123,7 @@ gf_proc_dump_call_frame (call_frame_t *call_frame, const char *key_buf,...)
 out:
         if (ret) {
                 gf_proc_dump_write("Unable to dump the frame information",
-                                   "(Lock acquisition failed) %p", my_frame);
+                                   "(Lock acquisition failed)");
                 return;
         }
 }
@@ -162,7 +162,7 @@ gf_proc_dump_call_stack (call_stack_t *call_stack, const char *key_buf,...)
         gf_proc_dump_write("uid", "%d", call_stack->uid);
         gf_proc_dump_write("gid", "%d", call_stack->gid);
         gf_proc_dump_write("pid", "%d", call_stack->pid);
-        gf_proc_dump_write("unique", "%Ld", call_stack->unique);
+        gf_proc_dump_write("unique", "%" PRIu64, call_stack->unique);
         gf_proc_dump_write("lk-owner", "%s", lkowner_utoa (&call_stack->lk_owner));
 
         if (call_stack->type == GF_OP_TYPE_FOP)
@@ -205,7 +205,7 @@ gf_proc_dump_pending_frames (call_pool_t *call_pool)
         gf_proc_dump_add_section("global.callpool");
         section_added = _gf_true;
         gf_proc_dump_write("callpool_address","%p", call_pool);
-        gf_proc_dump_write("callpool.cnt","%d", call_pool->cnt);
+        gf_proc_dump_write("callpool.cnt","%" PRId64, call_pool->cnt);
 
 
         list_for_each_entry (trav, &call_pool->all_frames, all_frames) {
diff --git a/libglusterfs/src/statedump.c b/libglusterfs/src/statedump.c
index 8175fab..92b0814 100644
--- a/libglusterfs/src/statedump.c
+++ b/libglusterfs/src/statedump.c
@@ -181,14 +181,14 @@ gf_proc_dump_xlator_mem_info (xlator_t *xl)
 
                 gf_proc_dump_add_section ("%s.%s - usage-type %d memusage",
                                           xl->type, xl->name, i);
-                gf_proc_dump_write ("size", "%u", xl->mem_acct.rec[i].size);
+                gf_proc_dump_write ("size", "%" PRIu64, xl->mem_acct.rec[i].size);
                 gf_proc_dump_write ("num_allocs", "%u",
                                     xl->mem_acct.rec[i].num_allocs);
-                gf_proc_dump_write ("max_size", "%u",
+                gf_proc_dump_write ("max_size", "%" PRIu64,
                                     xl->mem_acct.rec[i].max_size);
                 gf_proc_dump_write ("max_num_allocs", "%u",
                                     xl->mem_acct.rec[i].max_num_allocs);
-                gf_proc_dump_write ("total_allocs", "%u",
+                gf_proc_dump_write ("total_allocs", "%" PRIu64,
                                     xl->mem_acct.rec[i].total_allocs);
         }
 
@@ -326,7 +326,7 @@ gf_proc_dump_mempool_info (glusterfs_ctx_t *ctx)
                 gf_proc_dump_write ("pool-name", "%s", pool->name);
                 gf_proc_dump_write ("hot-count", "%d", pool->hot_count);
                 gf_proc_dump_write ("cold-count", "%d", pool->cold_count);
-                gf_proc_dump_write ("padded_sizeof", "%lu",
+                gf_proc_dump_write ("padded_sizeof", "%d",
                                     pool->padded_sizeof_type);
                 gf_proc_dump_write ("alloc-count", "%"PRIu64, pool->alloc_count);
                 gf_proc_dump_write ("max-alloc", "%d", pool->max_alloc);
diff --git a/libglusterfs/src/statedump.h b/libglusterfs/src/statedump.h
index 8342b12..5b6c3b6 100644
--- a/libglusterfs/src/statedump.h
+++ b/libglusterfs/src/statedump.h
@@ -72,9 +72,11 @@ void gf_proc_dump_cleanup(void);
 
 void gf_proc_dump_info(int signum, glusterfs_ctx_t *ctx);
 
-int gf_proc_dump_add_section(char *key,...);
+int gf_proc_dump_add_section(char *key,...)
+    __attribute__((__format__(__printf__, 1, 2)));
 
-int gf_proc_dump_write(char *key, char *value,...);
+int gf_proc_dump_write(char *key, char *value,...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 void inode_table_dump(inode_table_t *itable, char *prefix);
 
diff --git a/rpc/rpc-lib/src/rpc-drc.c b/rpc/rpc-lib/src/rpc-drc.c
index 04b17f0..4893c45 100644
--- a/rpc/rpc-lib/src/rpc-drc.c
+++ b/rpc/rpc-lib/src/rpc-drc.c
@@ -600,10 +600,10 @@ rpcsvc_drc_priv (rpcsvc_drc_globals_t *drc)
         gf_proc_dump_write (key, "%d", drc->lru_factor);
 
         gf_proc_dump_build_key (key, "drc", "duplicate_request_count");
-        gf_proc_dump_write (key, "%d", drc->cache_hits);
+        gf_proc_dump_write (key, "%" PRIu64, drc->cache_hits);
 
         gf_proc_dump_build_key (key, "drc", "in_transit_duplicate_requests");
-        gf_proc_dump_write (key, "%d", drc->intransit_hits);
+        gf_proc_dump_write (key, "%" PRIu64, drc->intransit_hits);
 
         list_for_each_entry (client, &drc->clients_head, client_list) {
                 gf_proc_dump_build_key (key, "client", "%d.ip-address", i);
diff --git a/xlators/cluster/afr/src/afr-common.c b/xlators/cluster/afr/src/afr-common.c
index 4ca81e8..7c68ce1 100644
--- a/xlators/cluster/afr/src/afr-common.c
+++ b/xlators/cluster/afr/src/afr-common.c
@@ -4002,7 +4002,7 @@ afr_priv_dump (xlator_t *this)
 
         GF_ASSERT (priv);
         snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type, this->name);
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
         gf_proc_dump_write("child_count", "%u", priv->child_count);
         gf_proc_dump_write("read_child_rr", "%u", priv->read_child_rr);
         for (i = 0; i < priv->child_count; i++) {
diff --git a/xlators/debug/trace/src/trace.c b/xlators/debug/trace/src/trace.c
index c9d8393..3c0fa99 100644
--- a/xlators/debug/trace/src/trace.c
+++ b/xlators/debug/trace/src/trace.c
@@ -2971,7 +2971,7 @@ trace_dump_history (xlator_t *this)
         if (conf && conf->log_history == _gf_true) {
                 gf_proc_dump_build_key (key_prefix, "xlator.debug.trace",
                                         "history");
-                gf_proc_dump_add_section (key_prefix);
+                gf_proc_dump_add_section ("%s", key_prefix);
                 eh_dump (this->history, NULL, dump_history_trace);
         }
         ret = 0;
diff --git a/xlators/features/locks/src/posix.c b/xlators/features/locks/src/posix.c
index ff2eaec..55c2b8f 100644
--- a/xlators/features/locks/src/posix.c
+++ b/xlators/features/locks/src/posix.c
@@ -2260,7 +2260,7 @@ __dump_entrylks (pl_inode_t *pl_inode)
                                           ctime_r (&lock->granted_time.tv_sec, granted));
                         }
 
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -2278,7 +2278,7 @@ __dump_entrylks (pl_inode_t *pl_inode)
                                   lock->connection_id,
                                   ctime_r (&lock->blkd_time.tv_sec, blocked));
 
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -2330,7 +2330,7 @@ __dump_inodelks (pl_inode_t *pl_inode)
                                       &lock->granted_time.tv_sec,
                                       &lock->blkd_time.tv_sec,
                                       _gf_true);
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -2346,7 +2346,7 @@ __dump_inodelks (pl_inode_t *pl_inode)
                                       lock->client, lock->connection_id,
                                       0, &lock->blkd_time.tv_sec,
                                       _gf_false);
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -2387,7 +2387,7 @@ __dump_posixlks (pl_inode_t *pl_inode)
                             &lock->owner, lock->client, NULL,
                             &lock->granted_time.tv_sec, &lock->blkd_time.tv_sec,
                             (lock->blocked)? _gf_false: _gf_true);
-              gf_proc_dump_write(key, tmp);
+              gf_proc_dump_write(key, "%s", tmp);
 
               count++;
         }
diff --git a/xlators/features/quota/src/quota.c b/xlators/features/quota/src/quota.c
index b077c6d..d765abd 100644
--- a/xlators/features/quota/src/quota.c
+++ b/xlators/features/quota/src/quota.c
@@ -4251,7 +4251,7 @@ quota_priv_dump (xlator_t *this)
 
         priv = this->private;
 
-        gf_proc_dump_add_section ("xlators.features.quota.priv", this->name);
+        gf_proc_dump_add_section ("xlators.features.quota.priv");
 
         ret = TRY_LOCK (&priv->lock);
         if (ret)
diff --git a/xlators/mgmt/glusterd/src/glusterd-rebalance.c b/xlators/mgmt/glusterd/src/glusterd-rebalance.c
index ae08dba..bb6d07b 100644
--- a/xlators/mgmt/glusterd/src/glusterd-rebalance.c
+++ b/xlators/mgmt/glusterd/src/glusterd-rebalance.c
@@ -276,7 +276,7 @@ glusterd_handle_defrag_start (glusterd_volinfo_t *volinfo, char *op_errstr,
         runner_add_arg (&runner, "--pid-file");
         runner_argprintf (&runner, "%s",pidfile);
         runner_add_arg (&runner, "-l");
-        runner_argprintf (&runner, logfile);
+        runner_argprintf (&runner, "%s", logfile);
         if (volinfo->memory_accounting)
                 runner_add_arg (&runner, "--mem-accounting");
 
diff --git a/xlators/mount/fuse/src/fuse-bridge.c b/xlators/mount/fuse/src/fuse-bridge.c
index 26f806e..3da5fc1 100644
--- a/xlators/mount/fuse/src/fuse-bridge.c
+++ b/xlators/mount/fuse/src/fuse-bridge.c
@@ -4856,7 +4856,7 @@ fuse_priv_dump (xlator_t  *this)
                             private->proto_minor);
         gf_proc_dump_write("volfile", "%s",
                             private->volfile?private->volfile:"None");
-        gf_proc_dump_write("volfile_size", "%d",
+        gf_proc_dump_write("volfile_size", "%" GF_PRI_SIZET,
                             private->volfile_size);
         gf_proc_dump_write("mount_point", "%s",
                             private->mount_point);
@@ -4892,7 +4892,7 @@ fuse_history_dump (xlator_t *this)
 
         gf_proc_dump_build_key (key_prefix, "xlator.mount.fuse",
                                 "history");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         eh_dump (this->history, NULL, dump_history_fuse);
 
         ret = 0;
diff --git a/xlators/performance/io-cache/src/io-cache.c b/xlators/performance/io-cache/src/io-cache.c
index 054d28c..ac2f8f8 100644
--- a/xlators/performance/io-cache/src/io-cache.c
+++ b/xlators/performance/io-cache/src/io-cache.c
@@ -1879,7 +1879,7 @@ __ioc_page_dump (ioc_page_t *page, char *prefix)
                 goto out;
         {
                 gf_proc_dump_write ("offset", "%"PRId64, page->offset);
-                gf_proc_dump_write ("size", "%"PRId64, page->size);
+                gf_proc_dump_write ("size", "%" GF_PRI_SIZET, page->size);
                 gf_proc_dump_write ("dirty", "%s", page->dirty ? "yes" : "no");
                 gf_proc_dump_write ("ready", "%s", page->ready ? "yes" : "no");
                 ioc_page_waitq_dump (page, prefix);
@@ -1969,7 +1969,7 @@ ioc_inode_dump (xlator_t *this, inode_t *inode)
                 if (uuid_is_null (ioc_inode->inode->gfid))
                         goto unlock;
 
-                gf_proc_dump_add_section (key_prefix);
+                gf_proc_dump_add_section ("%s", key_prefix);
                 section_added = _gf_true;
 
                 __inode_path (ioc_inode->inode, NULL, &path);
@@ -1992,7 +1992,7 @@ unlock:
 out:
         if (ret && ioc_inode) {
                 if (section_added == _gf_false)
-                        gf_proc_dump_add_section (key_prefix);
+                        gf_proc_dump_add_section ("%s", key_prefix);
                 gf_proc_dump_write ("Unable to print the status of ioc_inode",
                                     "(Lock acquisition failed) %s",
                                     uuid_utoa (inode->gfid));
@@ -2014,7 +2014,7 @@ ioc_priv_dump (xlator_t *this)
         priv = this->private;
 
         gf_proc_dump_build_key (key_prefix, "io-cache", "priv");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         add_section = _gf_true;
 
         ret = pthread_mutex_trylock (&priv->table_lock);
@@ -2026,8 +2026,8 @@ ioc_priv_dump (xlator_t *this)
                 gf_proc_dump_write ("cache_used", "%ld", priv->cache_used);
                 gf_proc_dump_write ("inode_count", "%u", priv->inode_count);
                 gf_proc_dump_write ("cache_timeout", "%u", priv->cache_timeout);
-                gf_proc_dump_write ("min-file-size", "%u", priv->min_file_size);
-                gf_proc_dump_write ("max-file-size", "%u", priv->max_file_size);
+                gf_proc_dump_write ("min-file-size", "%" PRIu64, priv->min_file_size);
+                gf_proc_dump_write ("max-file-size", "%" PRIu64, priv->max_file_size);
         }
         pthread_mutex_unlock (&priv->table_lock);
 out:
@@ -2035,7 +2035,7 @@ out:
                 if (!add_section) {
                         gf_proc_dump_build_key (key_prefix, "xlator."
                                                 "performance.io-cache", "priv");
-                        gf_proc_dump_add_section (key_prefix);
+                        gf_proc_dump_add_section ("%s", key_prefix);
                 }
                 gf_proc_dump_write ("Unable to dump the state of private "
                                     "structure of io-cache xlator", "(Lock "
diff --git a/xlators/performance/io-threads/src/io-threads.c b/xlators/performance/io-threads/src/io-threads.c
index 4dd7a99..c6ef26d 100644
--- a/xlators/performance/io-threads/src/io-threads.c
+++ b/xlators/performance/io-threads/src/io-threads.c
@@ -2681,7 +2681,7 @@ iot_priv_dump (xlator_t *this)
         snprintf (key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type,
                   this->name);
 
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         gf_proc_dump_write("maximum_threads_count", "%d", conf->max_count);
         gf_proc_dump_write("current_threads_count", "%d", conf->curr_count);
diff --git a/xlators/performance/open-behind/src/open-behind.c b/xlators/performance/open-behind/src/open-behind.c
index 29ef643..7567036 100644
--- a/xlators/performance/open-behind/src/open-behind.c
+++ b/xlators/performance/open-behind/src/open-behind.c
@@ -818,7 +818,7 @@ ob_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.open-behind",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("use_anonymous_fd", "%d", conf->use_anonymous_fd);
 
@@ -847,13 +847,13 @@ ob_fdctx_dump (xlator_t *this, fd_t *fd)
 
         gf_proc_dump_build_key (key_prefix, "xlator.performance.open-behind",
                                 "file");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("fd", "%p", fd);
 
         gf_proc_dump_write ("open_frame", "%p", ob_fd->open_frame);
 
-        gf_proc_dump_write ("open_frame.root.unique", "%p",
+        gf_proc_dump_write ("open_frame.root.unique", "%" PRIu64,
 			    ob_fd->open_frame->root->unique);
 
 	gf_proc_dump_write ("loc.path", "%s", ob_fd->loc.path);
diff --git a/xlators/performance/quick-read/src/quick-read.c b/xlators/performance/quick-read/src/quick-read.c
index 445ea86..70dc0e9 100644
--- a/xlators/performance/quick-read/src/quick-read.c
+++ b/xlators/performance/quick-read/src/quick-read.c
@@ -705,7 +705,7 @@ qr_inodectx_dump (xlator_t *this, inode_t *inode)
 
         gf_proc_dump_build_key (key_prefix, "xlator.performance.quick-read",
                                 "inodectx");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("entire-file-cached", "%s", qr_inode->data ? "yes" : "no");
 
@@ -751,7 +751,7 @@ qr_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.quick-read",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("max_file_size", "%d", conf->max_file_size);
         gf_proc_dump_write ("cache_timeout", "%d", conf->cache_timeout);
@@ -768,7 +768,7 @@ qr_priv_dump (xlator_t *this)
         }
 
         gf_proc_dump_write ("total_files_cached", "%d", file_count);
-        gf_proc_dump_write ("total_cache_used", "%d", total_size);
+        gf_proc_dump_write ("total_cache_used", "%" PRIu64, total_size);
 
 out:
         return 0;
diff --git a/xlators/performance/read-ahead/src/read-ahead.c b/xlators/performance/read-ahead/src/read-ahead.c
index 6e2d845..174058b 100644
--- a/xlators/performance/read-ahead/src/read-ahead.c
+++ b/xlators/performance/read-ahead/src/read-ahead.c
@@ -780,7 +780,7 @@ ra_page_dump (struct ra_page *page)
 
         gf_proc_dump_write ("offset", "%"PRId64, page->offset);
 
-        gf_proc_dump_write ("size", "%"PRId64, page->size);
+        gf_proc_dump_write ("size", "%" GF_PRI_SIZET, page->size);
 
         gf_proc_dump_write ("dirty", "%s", page->dirty ? "yes" : "no");
 
@@ -806,7 +806,6 @@ ra_fdctx_dump (xlator_t *this, fd_t *fd)
         int32_t       ret      = 0, i = 0;
         uint64_t      tmp_file = 0;
         char         *path     = NULL;
-        char          key[GF_DUMP_MAX_BUF_LEN]        = {0, };
         char          key_prefix[GF_DUMP_MAX_BUF_LEN] = {0, };
 
 	fd_ctx_get (fd, this, &tmp_file);
@@ -821,7 +820,7 @@ ra_fdctx_dump (xlator_t *this, fd_t *fd)
                                 "xlator.performance.read-ahead",
                                 "file");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         ret = __inode_path (fd->inode, NULL, &path);
         if (path != NULL) {
@@ -847,8 +846,7 @@ ra_fdctx_dump (xlator_t *this, fd_t *fd)
 
         for (page = file->pages.next; page != &file->pages;
              page = page->next) {
-                sprintf (key, "page[%d]", i);
-                gf_proc_dump_write (key, "%p", page[i++]);
+                gf_proc_dump_write ("page", "%d: %p", (void *)page);
 		ra_page_dump (page);
         }
 
@@ -1064,14 +1062,14 @@ ra_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.read-ahead",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         add_section = _gf_true;
 
         ret = pthread_mutex_trylock (&conf->conf_lock);
         if (ret)
                 goto out;
         {
-                gf_proc_dump_write ("page_size", "%d", conf->page_size);
+                gf_proc_dump_write ("page_size", "%" PRIu64, conf->page_size);
                 gf_proc_dump_write ("page_count", "%d", conf->page_count);
                 gf_proc_dump_write ("force_atime_update", "%d",
                                     conf->force_atime_update);
@@ -1082,7 +1080,7 @@ ra_priv_dump (xlator_t *this)
 out:
         if (ret && conf) {
                 if (add_section == _gf_false)
-                        gf_proc_dump_add_section (key_prefix);
+                        gf_proc_dump_add_section ("%s", key_prefix);
 
                 gf_proc_dump_write ("Unable to dump priv",
                                     "(Lock acquisition failed) %s", this->name);
diff --git a/xlators/performance/write-behind/src/write-behind.c b/xlators/performance/write-behind/src/write-behind.c
index 9586c5d..356e33f 100644
--- a/xlators/performance/write-behind/src/write-behind.c
+++ b/xlators/performance/write-behind/src/write-behind.c
@@ -1969,10 +1969,10 @@ wb_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.write-behind",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
-        gf_proc_dump_write ("aggregate_size", "%d", conf->aggregate_size);
-        gf_proc_dump_write ("window_size", "%d", conf->window_size);
+        gf_proc_dump_write ("aggregate_size", "%" PRIu64, conf->aggregate_size);
+        gf_proc_dump_write ("window_size", "%" PRIu64, conf->window_size);
         gf_proc_dump_write ("flush_behind", "%d", conf->flush_behind);
         gf_proc_dump_write ("trickling_writes", "%d", conf->trickling_writes);
 
@@ -1993,7 +1993,7 @@ __wb_dump_requests (struct list_head *head, char *prefix)
                 gf_proc_dump_build_key (key_prefix, key,
                                         (char *)gf_fop_list[req->fop]);
 
-                gf_proc_dump_add_section(key_prefix);
+                gf_proc_dump_add_section("%s", key_prefix);
 
                 gf_proc_dump_write ("request-ptr", "%p", req);
 
@@ -2050,7 +2050,7 @@ wb_inode_dump (xlator_t *this, inode_t *inode)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.write-behind",
                                 "wb_inode");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         __inode_path (inode, NULL, &path);
         if (path != NULL) {
diff --git a/xlators/protocol/client/src/client.c b/xlators/protocol/client/src/client.c
index 45ef9de..746009a 100644
--- a/xlators/protocol/client/src/client.c
+++ b/xlators/protocol/client/src/client.c
@@ -2720,11 +2720,11 @@ client_priv_dump (xlator_t *this)
         gf_proc_dump_build_key(key_prefix, "xlator.protocol.client",
                                "%s.priv", this->name);
 
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         list_for_each_entry(tmp, &conf->saved_fds, sfd_pos) {
                 sprintf (key, "fd.%d.remote_fd", i);
-                gf_proc_dump_write(key, "%d", tmp->remote_fd);
+                gf_proc_dump_write(key, "%" PRId64, tmp->remote_fd);
                 client_fd_lk_ctx_dump (this, tmp->lk_ctx, i);
                 i++;
         }
diff --git a/xlators/protocol/server/src/server.c b/xlators/protocol/server/src/server.c
index 5b71518..83bf40f 100644
--- a/xlators/protocol/server/src/server.c
+++ b/xlators/protocol/server/src/server.c
@@ -294,7 +294,7 @@ server_priv (xlator_t *this)
                 return 0;
 
         gf_proc_dump_build_key (key, "xlator.protocol.server", "priv");
-        gf_proc_dump_add_section (key);
+        gf_proc_dump_add_section ("%s", key);
 
         ret = pthread_mutex_trylock (&conf->mutex);
         if (ret != 0)
diff --git a/xlators/storage/posix/src/posix.c b/xlators/storage/posix/src/posix.c
index 25a541d..468f88c 100644
--- a/xlators/storage/posix/src/posix.c
+++ b/xlators/storage/posix/src/posix.c
@@ -4978,7 +4978,7 @@ posix_priv (xlator_t *this)
 
         snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type,
                  this->name);
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         if (!this)
                 return 0;
