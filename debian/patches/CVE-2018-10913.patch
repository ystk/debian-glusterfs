From: Markus Koschany <apo@debian.org>
Date: Wed, 19 Sep 2018 17:34:39 +0200
Subject: CVE-2018-10913

This is also the fix for CVE-2018-10914

Origin: https://review.gluster.org/21071
---
 libglusterfs/src/glusterfs.h              |   5 -
 xlators/storage/posix/src/posix-helpers.c | 159 +-----------------------------
 xlators/storage/posix/src/posix.c         |  14 ---
 xlators/storage/posix/src/posix.h         |   4 -
 4 files changed, 2 insertions(+), 180 deletions(-)

diff --git a/libglusterfs/src/glusterfs.h b/libglusterfs/src/glusterfs.h
index 9aa3817..c8944eb 100644
--- a/libglusterfs/src/glusterfs.h
+++ b/libglusterfs/src/glusterfs.h
@@ -113,9 +113,6 @@
 
 #define GLUSTERFS_INTERNAL_FOP_KEY  "glusterfs-internal-fop"
 
-#define ZR_FILE_CONTENT_STR     "glusterfs.file."
-#define ZR_FILE_CONTENT_STRLEN 15
-
 #define GLUSTERFS_WRITE_IS_APPEND "glusterfs.write-is-append"
 #define GLUSTERFS_OPEN_FD_COUNT "glusterfs.open-fd-count"
 #define GLUSTERFS_INODELK_COUNT "glusterfs.inodelk-count"
@@ -148,8 +145,6 @@
 
 #define GLUSTERFS_RPC_REPLY_SIZE               24
 
-#define ZR_FILE_CONTENT_REQUEST(key) (!strncmp(key, ZR_FILE_CONTENT_STR, \
-                                               ZR_FILE_CONTENT_STRLEN))
 
 #define DEFAULT_VAR_RUN_DIRECTORY    DATADIR "/run/gluster"
 #define GF_REPLICATE_TRASH_DIR          ".landfill"
diff --git a/xlators/storage/posix/src/posix-helpers.c b/xlators/storage/posix/src/posix-helpers.c
index 65382b5..c4b902e 100644
--- a/xlators/storage/posix/src/posix-helpers.c
+++ b/xlators/storage/posix/src/posix-helpers.c
@@ -695,157 +695,6 @@ out:
 }
 
 
-int
-posix_set_file_contents (xlator_t *this, const char *path, char *keyp,
-                         data_t *value, int flags)
-{
-        char *      key                        = NULL;
-        char        real_path[PATH_MAX];
-        int32_t     file_fd                    = -1;
-        int         op_ret                     = 0;
-        int         ret                        = -1;
-
-
-        /* XXX: does not handle assigning GFID to created files */
-        return -1;
-
-        key = &(keyp[15]);
-        sprintf (real_path, "%s/%s", path, key);
-
-        if (flags & XATTR_REPLACE) {
-                /* if file exists, replace it
-                 * else, error out */
-                file_fd = open (real_path, O_TRUNC|O_WRONLY);
-
-                if (file_fd == -1) {
-                        goto create;
-                }
-
-                if (value->len) {
-                        ret = write (file_fd, value->data, value->len);
-                        if (ret == -1) {
-                                op_ret = -errno;
-                                gf_log (this->name, GF_LOG_ERROR,
-                                        "write failed while doing setxattr "
-                                        "for key %s on path %s: %s",
-                                        key, real_path, strerror (errno));
-                                goto out;
-                        }
-
-                        ret = close (file_fd);
-                        if (ret == -1) {
-                                op_ret = -errno;
-                                gf_log (this->name, GF_LOG_ERROR,
-                                        "close failed on %s: %s",
-                                        real_path, strerror (errno));
-                                goto out;
-                        }
-                }
-
-        create: /* we know file doesn't exist, create it */
-
-                file_fd = open (real_path, O_CREAT|O_WRONLY, 0644);
-
-                if (file_fd == -1) {
-                        op_ret = -errno;
-                        gf_log (this->name, GF_LOG_ERROR,
-                                "failed to open file %s with O_CREAT: %s",
-                                key, strerror (errno));
-                        goto out;
-                }
-
-                ret = write (file_fd, value->data, value->len);
-                if (ret == -1) {
-                        op_ret = -errno;
-                        gf_log (this->name, GF_LOG_ERROR,
-                                "write failed on %s while setxattr with "
-                                "key %s: %s",
-                                real_path, key, strerror (errno));
-                        goto out;
-                }
-
-                ret = close (file_fd);
-                if (ret == -1) {
-                        op_ret = -errno;
-                        gf_log (this->name, GF_LOG_ERROR,
-                                "close failed on %s while setxattr with "
-                                "key %s: %s",
-                                real_path, key, strerror (errno));
-                        goto out;
-                }
-        }
-
-out:
-        return op_ret;
-}
-
-
-int
-posix_get_file_contents (xlator_t *this, uuid_t pargfid,
-                         const char *name, char **contents)
-{
-        char        *real_path                 = NULL;
-        int32_t     file_fd                    = -1;
-        struct iatt stbuf                      = {0,};
-        int         op_ret                     = 0;
-        int         ret                        = -1;
-
-
-        MAKE_HANDLE_PATH (real_path, this, pargfid, name);
-
-        op_ret = posix_istat (this, pargfid, name, &stbuf);
-        if (op_ret == -1) {
-                op_ret = -errno;
-                gf_log (this->name, GF_LOG_ERROR, "lstat failed on %s: %s",
-                        real_path, strerror (errno));
-                goto out;
-        }
-
-        file_fd = open (real_path, O_RDONLY);
-
-        if (file_fd == -1) {
-                op_ret = -errno;
-                gf_log (this->name, GF_LOG_ERROR, "open failed on %s: %s",
-                        real_path, strerror (errno));
-                goto out;
-        }
-
-        *contents = GF_CALLOC (stbuf.ia_size + 1, sizeof(char),
-                               gf_posix_mt_char);
-        if (! *contents) {
-                op_ret = -errno;
-                goto out;
-        }
-
-        ret = read (file_fd, *contents, stbuf.ia_size);
-        if (ret <= 0) {
-                op_ret = -1;
-                gf_log (this->name, GF_LOG_ERROR, "read on %s failed: %s",
-                        real_path, strerror (errno));
-                goto out;
-        }
-
-        *contents[stbuf.ia_size] = '\0';
-
-        op_ret = close (file_fd);
-        file_fd = -1;
-        if (op_ret == -1) {
-                op_ret = -errno;
-                gf_log (this->name, GF_LOG_ERROR, "close on %s failed: %s",
-                        real_path, strerror (errno));
-                goto out;
-        }
-
-out:
-        if (op_ret < 0) {
-                GF_FREE (*contents);
-                if (file_fd != -1)
-                        close (file_fd);
-        }
-
-        return op_ret;
-}
-
 static int gf_xattr_enotsup_log;
 
 int
@@ -855,10 +704,6 @@ posix_handle_pair (xlator_t *this, const char *real_path,
         int sys_ret = -1;
         int ret     = 0;
 
-        if (ZR_FILE_CONTENT_REQUEST(key)) {
-                ret = posix_set_file_contents (this, real_path, key, value,
-                                               flags);
-        } else {
                 sys_ret = sys_lsetxattr (real_path, key, value->data,
                                          value->len, flags);
 
@@ -897,7 +742,7 @@ posix_handle_pair (xlator_t *this, const char *real_path,
                         ret = -errno;
                         goto out;
                 }
-        }
+
 out:
         return ret;
 }
@@ -1211,7 +1056,7 @@ _handle_entry_create_keyvalue_pair (dict_t *d, char *k, data_t *v,
             !strcmp ("gfid-req", k) ||
             !strcmp (POSIX_ACL_DEFAULT_XATTR, k) ||
             !strcmp (POSIX_ACL_ACCESS_XATTR, k) ||
-            ZR_FILE_CONTENT_REQUEST(k)) {
+            posix_xattr_ignorable (k,filler)) {
                 return 0;
         }
 
diff --git a/xlators/storage/posix/src/posix.c b/xlators/storage/posix/src/posix.c
index 6cfa222..b9b3122 100644
--- a/xlators/storage/posix/src/posix.c
+++ b/xlators/storage/posix/src/posix.c
@@ -3363,7 +3363,6 @@ posix_getxattr (call_frame_t *frame, xlator_t *this,
         char                 *value                 = NULL;
         char                 *real_path             = NULL;
         dict_t               *dict                  = NULL;
-        char                 *file_contents         = NULL;
         int                   ret                   = -1;
         char                 *path                  = NULL;
         char                 *rpath                 = NULL;
@@ -3386,19 +3385,6 @@ posix_getxattr (call_frame_t *frame, xlator_t *this,
         op_ret = -1;
         priv = this->private;
 
-        if (loc->inode && IA_ISDIR(loc->inode->ia_type) && name &&
-            ZR_FILE_CONTENT_REQUEST(name)) {
-                ret = posix_get_file_contents (this, loc->gfid, &name[15],
-                                               &file_contents);
-                if (ret < 0) {
-                        op_errno = -ret;
-                        gf_log (this->name, GF_LOG_ERROR,
-                                "getting file contents failed: %s",
-                                strerror (op_errno));
-                        goto out;
-                }
-        }
-
         dict = dict_new ();
         if (!dict) {
                 op_errno = ENOMEM;
diff --git a/xlators/storage/posix/src/posix.h b/xlators/storage/posix/src/posix.h
index d579bf6..3634ae3 100644
--- a/xlators/storage/posix/src/posix.h
+++ b/xlators/storage/posix/src/posix.h
@@ -192,10 +192,6 @@ int posix_handle_pair (xlator_t *this, const char *real_path, char *key,
 int posix_fhandle_pair (xlator_t *this, int fd, char *key, data_t *value,
                         int flags);
 void posix_spawn_janitor_thread (xlator_t *this);
-int posix_get_file_contents (xlator_t *this, uuid_t pargfid,
-                             const char *name, char **contents);
-int posix_set_file_contents (xlator_t *this, const char *path, char *key,
-                             data_t *value, int flags);
 int posix_acl_xattr_set (xlator_t *this, const char *path, dict_t *xattr_req);
 int posix_gfid_heal (xlator_t *this, const char *path, loc_t *loc, dict_t *xattr_req);
 int posix_entry_create_xattr_set (xlator_t *this, const char *path,
